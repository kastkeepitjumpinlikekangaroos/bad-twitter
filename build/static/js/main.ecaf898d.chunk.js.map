{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","header","className","state","user","body","view","allTweets","console","log","loginScreen","browsingTweetsScreen","sendTweetScreen","onSubmit","login","type","name","value","usernameInput","onChange","e","setState","target","displayTweets","onClick","preventDefault","length","style","textAlign","map","tweet","content","submitTweet","tweetInput","event","getAllTweets","fetch","BASE_URL","then","response","json","myJson","method","headers","JSON","stringify","data","catch","error","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ecaf898d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst BASE_URL = 'http://localhost:8080';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            allTweets: [],\n            view: 'login',\n            user: null,\n            usernameInput: '',\n            tweetInput: ''\n        }\n    }\n\n\n    render() {\n        return (\n            <div>\n                {this.header()}\n                <div className='container'>\n                    {this.body()}\n                </div>\n            </div>\n        )\n    }\n\n    header = () => (\n        <div className='header'>\n            <h1>Welcome to bad-twitter {this.state.user || ''}</h1>\n        </div>\n    );\n\n    body = () => {\n        const {view, allTweets} = this.state;\n        console.log(allTweets);\n        if (view === 'login')\n            return this.loginScreen();\n\n        if (view === 'viewing')\n            return this.browsingTweetsScreen();\n\n        if (view === 'tweeting')\n            return this.sendTweetScreen();\n    };\n\n    loginScreen = () => (\n        <form onSubmit={this.login}>\n            <h1>Username:</h1>\n            <input\n                className='text-input'\n                type=\"text\"\n                name=\"username\"\n                value={this.state.usernameInput}\n                onChange={e => this.setState({usernameInput: e.target.value})}\n            />\n            <br/>\n            <br/>\n            <br/>\n            <input className='button' type=\"submit\" value=\"Submit\"/>\n        </form>\n    );\n\n    browsingTweetsScreen = () => (\n        <div>\n            {this.displayTweets()}\n            <br/>\n            <br/>\n            <br/>\n            <button\n                className='button'\n                onClick={e => {\n                    e.preventDefault();\n                    this.setState({view: 'tweeting'})\n                }}>\n                Tweet\n            </button>\n        </div>\n    );\n\n    displayTweets = () => {\n        const {allTweets} = this.state;\n        if (allTweets.length === 0)\n            return (\n                <div style={{textAlign: 'center'}}>\n                    <h1>No tweets to show</h1>\n                </div>\n            );\n        return allTweets.map(tweet => (\n            <div className='tweet'>\n                <h1 className='tweet__user'>{tweet.user}</h1>\n                {tweet.content}\n            </div>\n        ))\n    };\n\n\n    sendTweetScreen = () => (\n        <form onSubmit={this.submitTweet}>\n            <h1>Tweet:</h1>\n            <input\n                className='text-input'\n                type=\"text\"\n                name=\"tweet\"\n                value={this.state.tweetInput}\n                onChange={e => this.setState({tweetInput: e.target.value})}\n            />\n            <br/>\n            <br/>\n            <br/>\n            <input className='button' type=\"submit\" value=\"Submit\"/>\n        </form>\n    );\n\n    login = (event) => {\n        event.preventDefault();\n        this.setState({\n            user: this.state.usernameInput,\n            view: 'viewing'\n        });\n        this.getAllTweets()\n    };\n\n    getAllTweets = () => {\n        fetch(BASE_URL + '/getAllTweets')\n            .then((response) => {\n                return response.json();\n            })\n            .then((myJson) => {\n                this.setState({allTweets: myJson.allTweets})\n            });\n    };\n\n    submitTweet = (event) => {\n        event.preventDefault();\n\n        fetch(BASE_URL + '/tweet', {\n            method: 'POST', // or 'PUT'\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                content: this.state.tweetInput,\n                user: this.state.user,\n            }),\n        })\n            .then((response) => response.json())\n            .then((data) => {\n                console.log(data)\n                this.setState({view: 'viewing', allTweets: data.allTweets, tweetInput: ''})\n            })\n            .catch((error) => {\n                console.error('Error:', error);\n            });\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}